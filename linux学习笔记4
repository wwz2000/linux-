## **软件包管理**
软件运行环境  
软件包基础  
rpm包管理  
yum管理  
定制yum仓库  
编译安装  
软件运行和编译  
ABI：Application Binary Interface  
Windows与Linux不兼容  
ELF(Executable and Linkable Format)  
PE（Portable Executable）  
库级别的虚拟化：  
Linux: WINE  
Windows: Cygwin  
API：Application Programming Interface  
POSIX：Portable OS  
程序源代码 --> 预处理 --> 编译 --> 汇编 --> 链接  
静态编译：.a  
动态编译：.so本章内容  
软件运行环境   
软件包基础   
rpm包管理  
yum管理  
定制yum仓库  
编译安装  
## 软件运行和编译  
ABI：Application Binary Interface   
Windows与Linux不兼容  
ELF(Executable and Linkable Format)  
PE（Portable Executable）  
库级别的虚拟化：  
Linux: WINE  
Windows: Cygwin  
API：Application Programming Interface  
POSIX：Portable OS  
程序源代码 --> 预处理 --> 编译 --> 汇编 --> 链接  
静态编译：.a  
动态编译：.so  
## 静态和动态链接
链接主要作用是把各个模块之间相互引用的部分处理好，使得各个模块之间能  
够正确地衔接，分为静态链接和动态链接  
**静态链接**  
把程序对应的依赖库复制一份到包  
libxxx.a  
嵌入程序包  
升级难，需重新编译  
占用较多空间，迁移容易  
**动态链接**  
只把依赖加做一个动态链接    
libxxx.so     
连接指向    
占用较少空间，升级方便  
## 包管理器
二进制应用程序的组成部分：  
二进制文件、库文件、配置文件、帮助文件  
程序包管理器：  
debian： deb文件, dpkg包管理器  
redhat： rpm文件, rpm包管理器  
rpm： Redhat Package Manager  
RPM Package Manager  
包命名  
源代码：name-VERSION.tar.gz|bz2|xz  
VERSION: major.minor.release  
rpm包命名方式：  
name-VERSION-release.arch.rpm   
例：bash-4.2.46-19.el7.x86_64.rpm  
VERSION: major.minor.release   
release：release.OS   
常见的arch：  
x86: i386, i486, i586, i686  
x86_64: x64, x86_64, amd64  
powerpc: ppc  
跟平台无关：noarch  
包命名和工具  
包：分类和拆包   
Application-VERSION-ARCH.rpm: 主包  
Application-devel-VERSION-ARCH.rpm 开发子包  
Application-utils-VERSION-ARHC.rpm 其它子包  
Application-libs-VERSION-ARHC.rpm 其它子包  
包之间：可能存在依赖关系，甚至循环依赖  
解决依赖包管理工具：   
yum：rpm包管理器的前端工具  
apt-get：deb包管理器前端工具  
zypper: suse上的rpm前端管理工具  
dnf: Fedora 18+ rpm包管理器前端管理工具  
库文件  
查看二进制程序所依赖的库文件  
ldd /PATH/TO/BINARY_FILE  
管理及查看本机装载的库文件  
ldconfig 加载配置文件中指定的库文件  
/sbin/ldconfig –p 显示本机已经缓存的所有可用库文件名及文件路径
映射关系   
配置文件：/etc/ld.so.conf, /etc/ld.so.conf.d/*.conf  
缓存文件：/etc/ld.so.cache   
### 程序包管理器：  
功能：将编译好的应用程序的各组成文件打包一个或几个程序包文件，从而
方便快捷地实现程序包的安装、卸载、查询、升级和校验等管理操作   
包文件组成 (每个包独有)  
RPM包内的文件  
RPM的元数据，如名称，版本，依赖性，描述等  
安装或卸载时运行的脚本  
数据库(公共)：/var/lib/rpm  
程序包名称及版本  
依赖关系  
功能说明  
包安装后生成的各文件路径及校验码信息  
程序包的来源  
管理程序包的方式：
使用包管理器：rpm  
使用前端工具：yum, dnf   
获取程序包的途径：     
(1) 系统发版的光盘或官方的服务器  
CentOS镜像：  
https://www.centos.org/download/  
http://mirrors.aliyun.com  
http://mirrors.sohu.com  
http://mirrors.163.com  
(2) 项目官方站点  
程序包的来源  
(3) 第三方组织：   
Fedora-EPEL：   
Extra Packages for Enterprise Linux  
Rpmforge:RHEL推荐，包很全   
搜索引擎：   
http://pkgs.org  
http://rpmfind.net  
http://rpm.pbone.net  
https://sourceforge.net/  
(4) 自己制作  
注意：第三方包建议要检查其合法性  
来源合法性,程序包的完整性  
rpm包管理  
CentOS系统上使用rpm命令管理程序包：  
安装、卸载、升级、查询、校验、数据库维护  
安装：   
rpm {-i|--install} [install-options] PACKAGE_FILE…  
-v: verbose  
-vv:  
-h: 以#显示程序包管理执行进度  
rpm -ivh PACKAGE_FILE ...  
rpm包安装  
[install-options]    
--test: 测试安装，但不真正执行安装，即dry run模式  
--nodeps：忽略依赖关系    
--replacepkgs | replacefiles    
--nosignature: 不检查来源合法性  
--nodigest：不检查包完整性  
--noscripts：不执行程序包脚本  
%pre: 安装前脚本 --nopre    
%post: 安装后脚本 --nopost    
%preun: 卸载前脚本 --nopreun    
%postun: 卸载后脚本 --nopostun  
rpm包升级  
升级：  
rpm {-U|--upgrade} [install-options] PACKAGE_FILE...  
rpm {-F|--freshen} [install-options] PACKAGE_FILE...  
upgrade：安装有旧版程序包，则“升级”  
 如果不存在旧版程序包，则“安装”  
freshen：安装有旧版程序包，则“升级”  
 如果不存在旧版程序包，则不执行升级操作  
rpm -Uvh PACKAGE_FILE ...    
rpm -Fvh PACKAGE_FILE ...  
--oldpackage：降级  
--force: 强制安装  
升级注意项  
注意：  
(1) 不要对内核做升级操作；Linux支持多内核版本并存，因此，对直接安装新版
本内核  
(2) 如果原程序包的配置文件安装后曾被修改，升级时，新版本的提供的同一个配
置文件并不会直接覆盖老版本的配置文件，而把新版本的文件重命名  
(FILENAME.rpmnew)后保留  
包查询
rpm {-q|--query} [select-options] [query-options]  
[select-options]    
-a: 所有包   
-f: 查看指定的文件由哪个程序包安装生成  
-p rpmfile：针对尚未安装的程序包文件做查询操作  
--whatprovides CAPABILITY：查询指定的CAPABILITY由哪个包所提供  
--whatrequires CAPABILITY：查询指定的CAPABILITY被哪个包所依赖  
rpm2cpio 包文件|cpio –itv 预览包内文件  
rpm2cpio 包文件|cpio –id “*.conf” 释放包内文件  
--changelog：查询rpm包的changelog  
-c: 查询程序的配置文件  
-d: 查询程序的文档  
-i: information  
-l: 查看指定的程序包安装后生成的所有文件    
--scripts：程序包自带的脚本    
--provides: 列出指定程序包所提供的CAPABILITY    
-R: 查询指定的程序包所依赖的CAPABILITY     
常用查询用法：    
 -qi PACKAGE, -qf FILE, -qc PACKAGE, -ql PACKAGE, -qd PACKAGE    
 -qpi PACKAGE_FILE, -qpl PACKAGE_FILE, ...    
 -qa    
包卸载：  
rpm {-e|--erase} [--allmatches] [--nodeps] [--noscripts]     [--notriggers]    
[--test] PACKAGE_NAME ...    
包校验    
rpm {-V|--verify} [select-options] [verify-options]    
S file Size differs    
M Mode differs (includes permissions and file type)    
5 digest (formerly MD5 sum) differs    
D Device major/minor number mismatch    
L readLink(2) path mismatch     
U User ownership differs    
G Group ownership differs    
T mTime differs    
P capabilities differ      
包来源合法性验正及完整性验证  
完整性验证：SHA256  
来源合法性验证：RSA  
公钥加密  
对称加密：加密、解密使用同一密钥  
非对称加密：密钥是成对儿的  
public key: 公钥，公开所有人  
secret key: 私钥, 不能公开  
导入所需要公钥  
rpm -K|checksig rpmfile 检查包的完整性和签名  
rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7  
CentOS 7发行版光盘提供：RPM-GPG-KEY-CentOS-7   
rpm -qa “gpg-pubkey*”  
rpm数据库  
数据库重建：  
/var/lib/rpm  
rpm {--initdb|--rebuilddb}  
initdb: 初始化 
如果事先不存在数据库，则新建之  
否则，不执行任何操作  
rebuilddb：重建已安装的包头的数据库索引目录  
## yum  
CentOS: yum, dnf  
YUM: Yellowdog Update Modifier，rpm的前端程序，可解决软件包相关依
赖性，可在多个库之间定位软件包，up2date的替代工具  
yum repository: yum repo，存储了众多rpm包，以及包的相关的元数据
文件（放置于特定目录repodata下）  
文件服务器：    
http://  
https://  
ftp://  
file://  
yum配置文件  
yum客户端配置文件：  
/etc/yum.conf：为所有仓库提供公共配置  
/etc/yum.repos.d/*.repo：为仓库的指向提供配置   
仓库指向的定义：  
[repositoryID]  
name=Some name for this repository  
baseurl=url://path/to/repository/  
enabled={1|0}  
gpgcheck={1|0}  
gpgkey=URL  
enablegroups={1|0}  
failovermethod={roundrobin|priority}  
roundrobin：意为随机挑选，默认值  
priority:按顺序访问  
cost= 默认为1000  
yum仓库    
yum的repo配置文件中可用的变量：   
$releasever: 当前OS的发行版的主版本号  
$arch: 平台，i386,i486,i586,x86_64等  
$basearch：基础平台；i386, x86_64  
$YUM0-$YUM9:自定义变量  
实例:  
http://server/centos/$releasever/$basearch/  
http://server/centos/7/x86_64  
http://server/centos/6/i384  
yum源     
阿里云repo文件  
http://mirrors.aliyun.com/repo/    
CentOS系统的yum源  
阿里云：https://mirrors.aliyun.com/centos/$releasever/os/x86_64/  
清华大学：https://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/os/x86_64/  
EPEL的yum源    
阿里云：https://mirrors.aliyun.com/epel/$releasever/x86_64  
阿里巴巴开源软件
https://opsx.alibaba.com/  
生成172.16.0.1_cobbler_ks_mirror_CentOS-X-x86_64_.repo  
yum-config-manager --add-repo=   http://172.16.0.1/cobbler/ks_mirror/7/  
yum-config-manager --disable “仓库名" 禁用仓库  
yum-config-manager --enable “仓库名” 启用仓库  
yum-config-manager  
yum命令  
yum命令的用法：  
yum [options] [command] [package ...]  
显示仓库列表：  
yum repolist [all|enabled|disabled]  
显示程序包：  
yum list  
yum list [all | glob_exp1] [glob_exp2] [...]  
yum list {available|installed|updates} [glob_exp1] [...]  
安装程序包：  
yum install package1 [package2] [...]  
yum reinstall package1 [package2] [...] (重新安装)  
yum命令  
升级程序包：  
yum update [package1] [package2] [...]  
yum downgrade package1 [package2] [...] (降级)  
检查可用升级：  
yum check-update    
卸载程序包：     
yum remove | erasepackage1 [package2] [...]    
yum命令    
查看程序包information：     
yum info [...]    
查看指定的特性(可以是某文件)是由哪个程序包所提供：    
yum provides | whatprovides feature1 [feature2] [...]    
清理本地缓存：  
清除/var/cache/yum/$basearch/$releasever缓存    
yum clean [ packages | metadata | expire-cache | rpmdb | plugins |
all ]      
构建缓存：    
yum makecache    
yum命令    
搜索：yum search string1 [string2] [...]      
以指定的关键字搜索程序包名及summary信息      
查看指定包所依赖的capabilities：      
yum deplist package1 [package2] [...]      
查看yum事务历史：        
yum history [info|list|packages-list|packages-info|      
summary|addon-info|redo|undo|    
rollback|new|sync|stats]    
yum history  
yum history info 6  
日志 ：/var/log/yum.log  
yum命令     
安装及升级本地程序包：  
yum localinstall rpmfile1 [rpmfile2] [...]  
 (用install替代)
yum localupdate rpmfile1 [rpmfile2] [...]  
 (用update替代)
包组管理的相关命令：      
yum groupinstall group1 [group2] [...]  
yum groupupdate group1 [group2] [...]  
yum grouplist [hidden] [groupwildcard] [...]  
yum groupremove group1 [group2] [...]  
yum groupinfo group1 [...]  
yum命令  
yum的命令行选项：  
--nogpgcheck：禁止进行gpg check  
-y: 自动回答为“yes”  
-q：静默模式  
--disablerepo=repoidglob：临时禁用此处指定的repo  
--enablerepo=repoidglob：临时启用此处指定的repo  
--noplugins：禁用所有插件  
系统光盘yum仓库  
系统安装光盘作为本地yum仓库：  
(1) 挂载光盘至某目录，例如/mnt/cdrom  
mount /dev/cdrom /mnt/cdrom  
(2) 创建配置文件    
[CentOS7]    
name=   
baseurl=   
gpgcheck=  
enabled=  
创建yum仓库：  
createrepo [options] <directory>  
程序包编译  
程序包编译安装：  
Application-VERSION-release.src.rpm --> 安装后，使用rpmbuild命令制作  
成二进制格式的rpm包，而后再安装  
源代码-->预处理-->编译-->汇编-->链接-->执行  
源代码组织格式：  
多文件：文件中的代码之间，很可能存在跨文件依赖关系  
C、C++：make 项目管理器  
configure脚本 --> Makefile.in --> Makefile  
java: maven  
编译安装  
C语言源代码编译安装三步骤：  
 1、./configure  
(1) 通过选项传递参数，指定启用特性、安装路径等；执行时会参考用户的  
指定以及Makefile.in文件生成Makefile    
(2) 检查依赖到的外部环境，如依赖的软件包  
 2、make 根据Makefile文件，构建应用程序    
 3、make install 复制文件到相应路径    
开发工具：   
 autoconf: 生成configure脚本  
 automake：生成Makefile.in  
注意：安装前查看INSTALL，README  
编译安装  
开源程序源代码的获取：  
官方自建站点：  
 apache.org (ASF：Apache Software Foundation)  
 mariadb.org    
 ...  
 代码托管：    
 SourceForge.net  
 Github.com  
 code.google.com  
 c/c++编译器: gcc (GNU C Complier)  
编译安装  
编译C源代码：  
准备：提供开发工具及开发环境  
开发工具：make, gcc等  
开发环境：开发库，头文件  
glibc：标准库  
实现：通过“包组”提供开发组件  
Development Tools  
Server Platform Development  
编译安装  
第一步：configure脚本  
 选项：指定安装位置、指定启用的特性  
 --help: 获取其支持使用的选项  
 选项分类：  
 安装路径设定：  
 --prefix=/PATH: 指定默认安装位置,默认为/usr/local/  
 --sysconfdir=/PATH：配置文件安装位置  
 System types:支持交叉编译  
 Optional Features: 可选特性  
 --disable-FEATURE  
 --enable-FEATURE[=ARG]  
 Optional Packages: 可选包  
 --with-PACKAGE[=ARG],依赖包  
 --without-PACKAGE,禁用依赖关系  
 注意：通常被编译操作依赖的程序包，需要安装此程序包的“开发”组件，其包名
一般类似于name-devel-VERSION  
第二步：make  
第三步：make install  
安装后的配置：
(1) 二进制程序目录导入至PATH环境变量中  
编辑文件/etc/profile.d/NAME.sh  
export PATH=/PATH/TO/BIN:$PATH  
(2) 导入库文件路径  
编辑/etc/ld.so.conf.d/NAME.conf  
添加新的库文件所在目录至此文件中  
让系统重新生成缓存：  
ldconfig [-v]  
编译安装  
(3) 导入头文件  
基于链接的方式实现：  
ln -sv  
(4) 导入帮助手册  
编辑/etc/man.config|man_db.conf文件  
添加一个MANPATH   
## 磁盘存储和文件系统
### 机械硬盘和固态硬盘


**机械硬盘（HDD）**：Hard Disk Drive，即是传统普通硬盘，主要由：盘片，磁头，盘片转轴及控制电机，磁头控制器，数据转换器，接口，缓存等几个部分组成。机械硬盘中所有的盘片都装在一个旋转轴上，每张盘片之间是平行的，在每个盘片的存储面上有一个磁头，磁头与盘片之间的距离比头发丝的直径还小，所有的磁头联在一个磁头控制器上，由磁头控制器负责各个磁头的运动。磁头可沿盘片的半径方向运动，加上盘片每分钟几千转的高速旋转，磁头就可以定位在盘片的指定位置上进行数据的读写操作。数据通过磁头由电磁流来改变极性方式被电磁流写到磁盘上，也可以通过相反方式读取。硬盘为精密设备，进入硬盘的空气必须过滤  
**固态硬盘（SSD）**：Solid State Drive，用固态电子存储芯片阵列而制成的硬盘，由控制单元和存储单元（FLASH芯片、DRAM芯片）组成。固态硬盘在接口的规范和定义、功能及使用方法上与普通硬盘的完全相同，在产品外形和尺寸上也与普通硬盘一致相较于HDD，SSD在防震抗摔、传输速率、功耗、重量、噪音上有明显优势，SSD传输速率性能是HDD的2倍 相较于SSD，HDD在价格、容量、使用寿命上占有绝对优势硬盘有价，数据无价，目前SSD不能完全取代HHD  
设备文件  
磁盘设备的设备文件命名：/dev/DEV    
磁盘设备的设备文件命名：/dev/DEV_FILE  
SCSI, SATA, SAS, IDE,USB: /dev/sd  
虚拟磁盘：/dev/vd  
不同磁盘标识：a-z,aa,ab…  
/dev/sda, /dev/sdb, ...  
同一设备上的不同分区：1,2, ...  
/dev/sda1, /dev/sda5  
硬盘存储术语  
head：磁头  
track：磁道  
cylinder: 柱面  
sector: 扇区，512bytes  
#### 管理分区  
列出块设备  
lsblk  
创建分区使用：  
fdisk 创建MBR分区  
gdisk 创建GPT分区  
parted 高级分区操作  
重新设置内存中的内核分区表版本  
partprobe  
parted命令
parted的操作都是实时生效的，小心使用  
用法：parted [选项]... [设备 [命令 [参数]...]...]  
parted /dev/sdb mklabel gpt|msdos  
parted /dev/sdb print  
parted /dev/sdb mkpart primary 1 200 （默认M）  
parted /dev/sdb rm 1  
parted –l 列出分区信息  
gdisk /dev/sdb 类fdisk 的GPT分区工具  
fdisk -l [-u] [device...] 查看分区  
fdisk /dev/sdb 管理分区  
子命令：  
p 分区列表  
t 更改分区类型 
n 创建新分区  
d 删除分区  
v 校验分区  
u 转换单位  
w 保存并退出  
q 不保存并退出  
分区工具fdisk和gdisk   
同步分区表  
查看内核是否已经识别新的分区  
cat /proc/partations  
centos6通知内核重新读取硬盘分区表  
新增分区用  
partx -a /dev/DEVICE  
kpartx -a /dev/DEVICE -f: force  
删除分区用  
partx -d --nr M-N /dev/DEVICE  
CentOS 5，7: 使用partprobe  
partprobe [/dev/DEVICE]  
文件系统  
文件系统是操作系统用于明确存储设备或分区上的文件的方法和数据结构；即
在存储设备上组织文件的方法。操作系统中负责管理和存储文件信息的软件结
构称为文件管理系统，简称文件系统  
从系统角度来看，文件系统是对文件存储设备的空间进行组织和分配，负责文
件存储并对存入的文件进行保护和检索的系统。具体地说，它负责为用户建立
文件，存入、读出、修改、转储文件，控制文件的存取，安全控制，日志，压
缩，加密等   
支持的文件系统：/lib/modules/`uname –r`/kernel/fs  
各种文件系统：  
https://en.wikipedia.org/wiki/Comparison_of_file_systems  
文件系统类型  
Linux文件系统：  
ext2(Extended file system) :适用于那些分区容量不是太大，更新也不频繁的情况，  
例如 /boot 分区  
ext3:是 ext2 的改进版本，其支持日志功能，能够帮助系统从非正常关机导致的异常中恢复。它通常被用作通用的文件系统  
ext4:是 ext 文件系统的最新版。提供了很多新的特性，包括纳秒级时间戳、创建和使用巨型文件(16TB)、最大1EB的文件系统，以及速度的提升  
xfs：SGI，支持最大8EB的文件系统  
btrfs（Oracle）, reiserfs, jfs（AIX）, swap  
#### 创建文件系统  
mkfs命令：  
(1) mkfs.FS_TYPE /dev/DEVICE  
ext4  
xfs  
btrfs  
vfat  
(2) mkfs -t FS_TYPE /dev/DEVICE  
-L 'LABEL' 设定卷标  
创建ext文件系统  
mke2fs：ext系列文件系统专用管理工具  
-t {ext2|ext3|ext4} 指定文件系统类型  
-b {1024|2048|4096} 指定块大小  
-L ‘LABEL’ 设置卷标  
-j 相当于 -t ext3  
mkfs.ext3 = mkfs -t ext3 = mke2fs -j = mke2fs -t ext3  
-i # 为数据空间中每多少个字节创建一个inode；不应该小于block大小  
-N # 指定分区中创建多少个inode  
-I 一个inode记录占用的磁盘空间大小，128---4096  
-m # 默认5%,为管理人员预留空间占总空间的百分比  
-O FEATURE[,...] 启用指定特性  
-O ^FEATURE 关闭指定特性  
#### 挂载mount
挂载:将额外文件系统与根文件系统某现存的目录建立起关联关系，进而使得此
目录做为其它文件访问入口的行为  
卸载:为解除此关联关系的过程  
把设备关联挂载点：mount Point  
mount  
卸载时：可使用设备，也可以使用挂载点  
umount  
挂载点下原有文件在挂载完成后会被临时隐藏  
挂载点目录一般为空  
用mount命令挂载文件系统  
挂载方法：mount DEVICE MOUNT_POINT  
mount：通过查看/etc/mtab文件显示当前已挂载的所有设备  
mount [-fnrsvw] [-t vfstype] [-o options] device dir  
device：指明要挂载的设备；  
(1) 设备文件：例如/dev/sda5  
(2) 卷标：-L 'LABEL', 例如 -L 'MYDATA'  
(3) UUID, -U 'UUID'：例如 -U '0c50523c-43f1-45e7-
85c0-a126711d406e'  
(4) 伪文件系统名称：proc, sysfs, devtmpfs, configfs
dir：挂载点
事先存在；建议使用空目录
进程正在使用中的设备无法被卸载  
mount常用命令选项  
-t vsftype 指定要挂载的设备上的文件系统类型  
-r readonly，只读挂载  
-w read and write, 读写挂载  
-n 不更新/etc/mtab，mount不可见  
-a 自动挂载所有支持自动挂载的设备(定义在了/etc/fstab文件  
中，且挂载选项中有auto功能)   
-L 'LABEL' 以卷标指定挂载设备  
-U 'UUID' 以UUID指定要挂载的设备  
-B, --bind 绑定目录到另一个目录上  
查看内核追踪到的已挂载的所有设备  
cat /proc/mounts  
mount常用命令选项  
-o options：(挂载文件系统的选项)，多个选项使用逗号分隔  
async 异步模式 sync 同步模式,内存更改时，同时写磁盘  
atime/noatime 包含目录和文件  
diratime/nodiratime 目录的访问时间戳  
auto/noauto 是否支持自动挂载,是否支持-a选项  
exec/noexec 是否支持将文件系统上运行应用程序  
dev/nodev 是否支持在此文件系统上使用设备文件  
suid/nosuid 是否支持suid和sgid权限  
remount 重新挂载  
ro只读 rw读写  
user/nouser 是否允许普通用户挂载此设备，/etc/fstab使用  
acl 启用此文件系统上的acl功能  
loop 使用loop设备  
defaults：相当于rw, suid, dev, exec, auto, nouser, async  
卸载命令  
查看挂载情况  
findmnt MOUNT_POINT|device  
查看正在访问指定文件系统的进程  
lsof MOUNT_POINT  
fuser -v MOUNT_POINT  
终止所有在正访问指定的文件系统的进程  
fuser -km MOUNT_POINT  
卸载  
umount DEVICE  
umount MOUNT_POINT   
#### 处理交换文件和分区   
交换分区是系统RAM的补充  
基本设置包括：  
创建交换分区或者文件  
使用mkswap写入特殊签名  
在/etc/fstab文件中添加适当的条目  
使用swapon -a 激活交换空间  
挂载交换分区  
启用：swapon  
swapon [OPTION]... [DEVICE]  
-a：激活所有的交换分区  
-p PRIORITY：指定优先级  
/etc/fstab:pri=value  
禁用：swapoff [OPTION]... [DEVICE]  
### RAID
RAID:Redundant Arrays of Inexpensive（Independent） Disks
1988年由加利福尼亚大学伯克利分校（University of CaliforniaBerkeley）
“A Case for Redundant Arrays of Inexpensive Disks”
多个磁盘合成一个“阵列”来提供更好的性能、冗余，或者两者都提供
RAID
提高IO能力
磁盘并行读写
提高耐用性
磁盘冗余来实现
级别：多块磁盘组织在一起的工作方式有所不同
RAID实现的方式
外接式磁盘阵列：通过扩展卡提供适配能力
内接式RAID：主板集成RAID控制器，安装OS前在BIOS里配置
软件RAID：通过OS实现
RAID级别
RAID-0：条带卷，strip
RAID-1：镜像卷，mirror
RAID-2
..
RAID-5
RAID-6
RAID-10
RAID-01
### 逻辑卷管理器（LVM）
允许对卷进行方便操作的抽象层，包括重新设定文件系统的大小
允许在多个物理设备间重新组织文件系统
将设备指定为物理卷
用一个或者多个物理卷来创建一个卷组  
物理卷是用固定大小的物理区域（Physical Extent，PE）来定义的
在物理卷上创建的逻辑卷  
是由物理区域（PE）组成
可以在逻辑卷上创建文件系统  
#### LVM介绍
LVM: Logical Volume Manager， Version: 2  
dm: device mapper：将一个或多个底层块设备组织成一个逻辑设备的模块  
设备名：/dev/dm-#  
软链接：  
/dev/mapper/VG_NAME-LV_NAME  
/dev/mapper/vol0-root   
/dev/VG_NAME/LV_NAME  
/dev/vol0/root    
pv管理工具  
显示pv信息  
pvs：简要pv信息显示  
pvdisplay  
创建pv  
pvcreate /dev/DEVICE  
删除pv  
pvremove /dev/DEVICE  
vg管理工具  
显示卷组  
vgs  
vgdisplay  
创建卷组  
vgcreate [-s #[kKmMgGtTpPeE]] VolumeGroupName  
PhysicalDevicePath [PhysicalDevicePath...]  
管理卷组  
vgextend VolumeGroupName PhysicalDevicePath   [PhysicalDevicePath...]  
vgreduce VolumeGroupName PhysicalDevicePath   [PhysicalDevicePath...]
删除卷组  
先做pvmove，再做vgremove  
lv管理工具  
显示逻辑卷  
lvs  
Lvdisplay  
创建逻辑卷  
lvcreate -L #[mMgGtT] -n NAME VolumeGroup  
lvcreate -l 60%VG -n mylv testvg  
lvcreate -l 100%FREE -n yourlv testvg  
删除逻辑卷  
lvremove /dev/VG_NAME/LV_NAME  
重设文件系统大小  
fsadm [options] resize device [new_size[BKMGTEP]]  
resize2fs [-f] [-F] [-M] [-P] [-p] device [new_size]  
xfs_growfs /mountpoint  
扩展和缩减逻辑卷  
扩展逻辑卷：  
lvextend -L [+]#[mMgGtT] /dev/VG_NAME/LV_NAME  
resize2fs /dev/VG_NAME/LV_NAME  
lvresize -r -l +100%FREE /dev/VG_NAME/LV_NAME  
缩减逻辑卷：  
umount /dev/VG_NAME/LV_NAME  
e2fsck -f /dev/VG_NAME/LV_NAME  
resize2fs /dev/VG_NAME/LV_NAME #[mMgGtT]  
lvreduce -L [-]#[mMgGtT] /dev/VG_NAME/LV_NAME  
## 网络协议和管理
### 网络应用程序
Web 浏览器（Chrome、IE、Firefox等）  
即时消息（QQ、微信、钉钉等）  
电子邮件（Outlook、foxmail 等）  
协作（视频会议、VNC、Netmeeting、WebEx 等）  
web网络服务（apache,nginx,IIS）  
文件网络服务（ftp,nfs,samba）  
数据库服务（ MySQL,MariaDB, MongoDB)  
中间件服务（Tomcat，JBoss）  
安全服务（ Netfilter）   
### 网络模型分层
OSI 模型的七层结构  
1 物理层  
2 数据链路层  
3 网络层   
4 传输层   
5 会话层  
6 表示层  
7 应用层  
PDU: Protocol Data Unit,协议数据单元是指对等层次之间传递的数据单位  
物理层的 PDU是数据位 bit  
数据链路层的 PDU是数据帧 frame  
网络层的PDU是数据包 packet  
传输层的 PDU是数据段 segment  
其他更高层次的PDU是消息 message   
TCP\IP协议  
Transmission Control Protocol/Internet Protocol  
传输控制协议/因特网互联协议  
TCP/IP是一个Protocol Stack，包括TCP、IP、UDP、
ICMP、RIP、TELNET、FTP、SMTP、ARP等许多协议  
最早发源于美国国防部（缩写为DoD）的因特网的前身
ARPA网项目，1983年1月1日，TCP/IP取代了旧的网络
控制协议NCP，成为今天的互联网和局域网的基石和标
准,由互联网工程任务组负责维护  
共定义了四层
和ISO参考模型的分层有对应关系  
TCP特性  
工作在传输层  
面向连接协议  
全双工协议  
半关闭  
错误检查  
将数据打包成段，排序  
确认机制  
数据恢复，重传  
流量控制，滑动窗口  
拥塞控制，慢启动和拥塞避免算法  
TCP包头
源端口、目标端口：计算机上的进程要和其他进程通信是要通过计算机端口的，
而一个计算机端口某个时刻只能被一个进程占用，所以通过指定源端口和目标
端口，就可以知道是哪两个进程需要通信。源端口、目标端口是用16位表示的，
可推算计算机的端口个数为2^16个  
序列号：表示本报文段所发送数据的第一个字节的编号。在TCP连接中所传送的
字节流的每一个字节都会按顺序编号。由于序列号由32位表示，所以每2^32个
字节，就会出现序列号回绕，再次从 0 开始  
确认号：表示接收方期望收到发送方下一个报文段的第一个字节数据的编号。
也就是告诉发送方：我希望你（指发送方）下次发送的数据的第一个字节数据
的编号为此确认号  
数据偏移：表示TCP报文段的首部长度，共4位，由于TCP首部包含一个长度可
变的选项部分，需要指定这个TCP报文段到底有多长。它指出 TCP 报文段的数
据起始处距离 TCP 报文段的起始处有多远。该字段的单位是32位(即4个字节为
计算单位），4位二进制最大表示15，所以数据偏移也就是TCP首部最大60字节  
URG：表示本报文段中发送的数据是否包含紧急数据。后面的紧急指针字段（urgent
pointer）只有当URG=1时才有效  
ACK：表示是否前面确认号字段是否有效。只有当ACK=1时，前面的确认号字段才有效。   
TCP规定，连接建立后，ACK必须为1,带ACK标志的TCP报文段称为确认报文段   
PSH：提示接收端应用程序应该立即从TCP接收缓冲区中读走数据，为接收后续数据腾出空
间。如果为1，则表示对方应当立即把数据提交给上层应用，而不是缓存起来，如果应用程序
不将接收到的数据读走，就会一直停留在TCP接收缓冲区中   
RST：如果收到一个RST=1的报文，说明与主机的连接出现了严重错误（如主机崩溃），必
须释放连接，然后再重新建立连接。或者说明上次发送给主机的数据有问题，主机拒绝响应，
带RST标志的TCP报文段称为复位报文段   
SYN：在建立连接时使用，用来同步序号。当SYN=1，ACK=0时，表示这是一个请求建立连
接的报文段；当SYN=1，ACK=1时，表示对方同意建立连接。SYN=1，说明这是一个请求
建立连接或同意建立连接的报文。只有在前两次握手中SYN才置为1，带SYN标志的TCP报文
段称为同步报文段   
FIN：表示通知对方本端要关闭连接了，标记数据是否发送完毕。如果FIN=1，即告诉对方：
“我的数据已经发送完毕，你可以释放连接了”，带FIN标志的TCP报文段称为结束报文段   
窗口大小：表示现在允许对方发送的数据量，也就是告诉对方，从本报文段
的确认号开始允许对方发送的数据量，达到此值，需要ACK确认后才能再继
续传送后面数据，由Window size value * Window size scaling factor
（此值在三次握手阶段TCP选项Window scale协商得到）得出此值   
校验和：提供额外的可靠性  
紧急指针：标记紧急数据在数据字段中的位置  
选项部分：其最大长度可根据TCP首部长度进行推算。TCP首部长度用4位表
示，选项部分最长为：(2^4-1)*4-20=40字节  
常见选项：  
最大报文段长度：Maxium Segment Size，MSS，通常1460字节  
窗口扩大：Window Scale  
时间戳： Timestamps  
1 最大报文段长度MSS（Maximum Segment Size）
指明自己期望对方发送TCP报文段时那个数据字段的长度。比如：1460字节。数
据字段的长度加上TCP首部的长度才等于整个TCP报文段的长度。MSS不宜设的太
大也不宜设的太小。若选择太小，极端情况下，TCP报文段只含有1字节数据，在
IP层传输的数据报的开销至少有40字节（包括TCP报文段的首部和IP数据报的首
部）。这样，网络的利用率就不会超过1/41。若TCP报文段非常长，那么在IP层传
输时就有可能要分解成多个短数据报片。在终点要把收到的各个短数据报片装配成
原来的TCP报文段。当传输出错时还要进行重传，这些也都会使开销增大。因此
MSS应尽可能大，只要在IP层传输时不需要再分片就行。在连接建立过程中，双
方都把自己能够支持的MSS写入这一字段。 MSS只出现在SYN报文中。即：MSS
出现在SYN=1的报文段中  
MTU和MSS值的关系：MTU=MSS+IP Header+TCP Header  
通信双方最终的MSS值=较小MTU-IP Header-TCP Header  
2 窗口扩大  
为了扩大窗口，由于TCP首部的窗口大小字段长度是16位，所以其表示的最大数是
65535。但是随着时延和带宽比较大的通信产生（如卫星通信），需要更大的窗口
来满足性能和吞吐率，所以产生了这个窗口扩大选项  
3 时间戳  
可以用来计算RTT(往返时间)，发送方发送TCP报文时，把当前的时间值放入时间
戳字段，接收方收到后发送确认报文时，把这个时间戳字段的值复制到确认报文中，
当发送方收到确认报文后即可计算出RTT。也可以用来防止回绕序号PAWS，也可
以说可以用来区分相同序列号的不同报文。因为序列号用32为表示，每2^32个序
列号就会产生回绕，那么使用时间戳字段就很容易区分相同序列号的不同报文  
